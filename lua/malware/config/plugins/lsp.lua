local LSP = {}

local opts = { noremap = true, silent = true }
local keymap = vim.keymap

function LSP.apply_keymap()
   opts.buffer = vim.api.nvim_get_current_buf()

   opts.desc = 'Show LSP references'
   keymap.set('n', 'gR', '<cmd>Telescope lsp_references<CR>', opts)

   opts.desc = 'Go to declaration'
   keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)

   opts.desc = 'Show LSP definitions'
   keymap.set('n', 'gd', '<cmd>Telescope lsp_definitions<CR>', opts)

   opts.desc = 'Show LSP implementations'
   keymap.set('n', 'gi', '<cmd>Telescope lsp_implementations<CR>', opts)

   opts.desc = 'Show LSP type definitions'
   keymap.set('n', 'gt', '<cmd>Telescope lsp_type_definitions<CR>', opts)

   opts.desc = 'Show available quick fixes'
   keymap.set({ 'n', 'v' }, '<leader>qf', vim.lsp.buf.code_action, opts)

   opts.desc = 'Smart rename'
   keymap.set('n', '<leader>rn', vim.lsp.buf.rename, opts)

   opts.desc = 'Show buffer diagnostics'
   keymap.set('n', '<leader>D', '<cmd>Telescope diagnostics bufnr=0<CR>', opts)

   opts.desc = 'Show line diagnostics'
   keymap.set('n', '<leader>d', vim.diagnostic.open_float, opts)

   opts.desc = 'Go to next diagnostic'
   keymap.set('n', ']d', vim.diagnostic.goto_next, opts)

   opts.desc = 'Go to previous diagnostic'
   keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)

   opts.desc = 'Show documentation'
   keymap.set('n', 'K', vim.lsp.buf.hover, opts)

   opts.desc = 'Format buffer'
   keymap.set('n', '<leader>rf', vim.lsp.buf.format, opts)

   opts.desc = 'Restart LSP'
   keymap.set('n', '<leader>rs', '<cmd>LspRestart<cr>', opts)
end

return LSP
