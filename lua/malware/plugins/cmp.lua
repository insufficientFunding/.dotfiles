local function set_cmp_colors()
   -- Customization for Pmenu
   --vim.api.nvim_set_hl(0, "PmenuSel", { bg = "#22252A", fg = "NONE" })
   --vim.api.nvim_set_hl(0, "Pmenu", { fg = "#C5CDD9", bg = "#22252A" })

   vim.api.nvim_set_hl(0, "CmpItemKindCopilot", { fg = "#ecc240", italic = true })

   vim.api.nvim_set_hl(0, "CmpItemAbbr", { fg = "#C5CDD9", bg = "NONE" })
   vim.api.nvim_set_hl(0, "CmpItemAbbrDeprecated", { fg = "#7E8294", bg = "NONE", strikethrough = true })
   vim.api.nvim_set_hl(0, "CmpItemAbbrMatch", { fg = "#82AAFF", bg = "NONE", bold = true })
   vim.api.nvim_set_hl(0, "CmpItemAbbrMatchFuzzy", { fg = "#82AAFF", bg = "NONE", bold = true })
   vim.api.nvim_set_hl(0, "CmpItemMenu", { fg = "#C792EA", bg = "NONE", italic = true })

   vim.api.nvim_set_hl(0, "CmpItemKindField", { fg = "#B5585F", italic = true })
   vim.api.nvim_set_hl(0, "CmpItemKindProperty", { link = "CmpItemKindField" })
   vim.api.nvim_set_hl(0, "CmpItemKindEvent", { link = "CmpItemKindField" })

   vim.api.nvim_set_hl(0, "CmpItemKindText", { fg = "#a3d55b", italic = true })
   vim.api.nvim_set_hl(0, "CmpItemKindEnum", { link = "CmpItemKindText" })
   vim.api.nvim_set_hl(0, "CmpItemKindKeyword", { link = "CmpItemKindText" })

   vim.api.nvim_set_hl(0, "CmpItemKindConstant", { fg = "#D4A959", italic = true })
   vim.api.nvim_set_hl(0, "CmpItemKindConstructor", { link = "CmpItemKindConstant" })
   vim.api.nvim_set_hl(0, "CmpItemKindReference", { link = "CmpItemKindConstant" })

   vim.api.nvim_set_hl(0, "CmpItemKindFunction", { fg = "#c193dc", italic = true })
   vim.api.nvim_set_hl(0, "CmpItemKindStruct", { link = "CmpItemKindFunction" })
   vim.api.nvim_set_hl(0, "CmpItemKindClass", { link = "CmpItemKindFunction" })
   vim.api.nvim_set_hl(0, "CmpItemKindModule", { link = "CmpItemKindFunction" })
   vim.api.nvim_set_hl(0, "CmpItemKindType", { link = "CmpItemKindFunction" })

   vim.api.nvim_set_hl(0, "CmpItemKindVariable", { fg = "#7E8294", italic = true })
   vim.api.nvim_set_hl(0, "CmpItemKindFile", { link = "CmpItemKindVariable" })

   vim.api.nvim_set_hl(0, "CmpItemKindUnit", { fg = "#D4A959", italic = true })
   vim.api.nvim_set_hl(0, "CmpItemKindSnippet", { link = "CmpItemKindUnit" })
   vim.api.nvim_set_hl(0, "CmpItemKindFolder", { link = "CmpItemKindUnit" })

   vim.api.nvim_set_hl(0, "CmpItemKindMethod", { fg = "#6C8ED4", italic = true })
   vim.api.nvim_set_hl(0, "CmpItemKindValue", { link = "CmpItemKindMethod" })
   vim.api.nvim_set_hl(0, "CmpItemKindEnumMember", { link = "CmpItemKindMethod" })

   vim.api.nvim_set_hl(0, "CmpItemKindInterface", { fg = "#58B5A8", italic = true })
   vim.api.nvim_set_hl(0, "CmpItemKindColor", { link = "CmpItemKindInterface" })
   vim.api.nvim_set_hl(0, "CmpItemKindTypeParameter", { link = "CmpItemKindInterface" })
end

return {
   "hrsh7th/nvim-cmp",
   event = "InsertEnter",
   dependencies = {
      "hrsh7th/cmp-buffer",
      "hrsh7th/cmp-path",
      "L3MON4D3/LuaSnip",
      "saadparwaiz1/cmp_luasnip",
      "rafamadriz/friendly-snippets",
      "chrisgrieser/cmp-nerdfont",
      "zbirenbaum/copilot-cmp",
   },
   config = function()
      local cmp = require("cmp")
      local luasnip = require("luasnip")

      require("luasnip.loaders.from_vscode").lazy_load()

      cmp.setup({
         view = {
            entries = { name = "custom", selection_order = "near_cursor" },
         },
         sorting = {
            priority_weight = 2,
            comparators = {
               require("copilot_cmp.comparators").prioritize,
               cmp.config.compare.offset,
               cmp.config.compare.exact,
               cmp.config.compare.score,
               cmp.config.compare.kind,
               cmp.config.compare.sort_text,
               cmp.config.compare.length,
               cmp.config.compare.order,
            },
         },

         window = {
            completion = {
               winhighlight = "Normal:Pmenu,FloatBorder:Pmenu,Search:None",
               col_offset = -3,
               side_padding = 0,
            },

            documentation = {
               winhighlight = "Normal:Pmenu,FloatBorder:PmenuSel",
            },
         },

         formatting = {
            fields = { "abbr", "kind" },
            format = function(entry, vim_item)
               local kind = require("lspkind").cmp_format({
                  mode = "symbol_text",
                  maxwidth = 50,
                  symbol_map = { Copilot = "ï„“" },
               })(entry, vim_item)
               local strings = vim.split(kind.kind, "%s", { trimempty = true })

               local type = string.lower(strings[2] or "")

               kind.kind = (strings[1] or "") .. " " .. type
               return kind
            end,
         },

         completion = {
            completeopt = "menu,menuone,preview,noselect",
         },

         snippet = {
            expand = function(args)
               luasnip.lsp_expand(args.body)
            end,
         },

         mapping = cmp.mapping.preset.insert({
            ["<C-j>"] = cmp.mapping.select_next_item(),
            ["<C-k>"] = cmp.mapping.select_prev_item(),
            ["<C-b>"] = cmp.mapping.scroll_docs(-4),
            ["<C-f>"] = cmp.mapping.scroll_docs(4),
            ["<C-Space>"] = cmp.mapping.complete(),
            ["<C-e>"] = cmp.mapping.abort(),
            ["<CR>"] = cmp.mapping.confirm({ select = false }),
         }),

         sources = {
            { name = "copilot" },
            { name = "nvim_lsp" },
            { name = "luasnip" },
            { name = "buffer" },
            { name = "path" },
            { name = "nerdfont" },
         },
      })

      require("copilot_cmp").setup()

      set_cmp_colors()
   end,
}
