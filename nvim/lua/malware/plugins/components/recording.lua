local lualine_require = require('lualine_require')
local macros = lualine_require.require('lualine.component'):extend()
local highlight = require('lualine.highlight')
local lualine = require('lualine')

function macros:init(options)
   macros.super.init(self, options)

   self.color = highlight.create_component_highlight_group(
      { fg = '#f36868', gui = 'bold', italic = true },
      'macros_highlight',
      self.options
   )

   vim.api.nvim_create_autocmd('RecordingEnter', {
      callback = function()
         lualine.refresh({
            place = {
               'statusline',
            },
         })
      end,
   })

   vim.api.nvim_create_autocmd('RecordingLeave', {
      callback = function()
         local timer = vim.loop.new_timer()
         timer:start(
            50,
            0,
            vim.schedule_wrap(function()
               lualine.refresh({
                  place = {
                     'statusline',
                  },
               })
            end)
         )
      end,
   })
end

function macros:update_status()
   local recording_register = vim.fn.reg_recording()
   if recording_register == '' then return '' end

   local data = 'ó°»ƒ RECORDING @' .. recording_register

   data = highlight.component_format_highlight(self.color) .. data

   return data
end

return macros
